package com.mapuni.gdydcaiji.database.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mapuni.gdydcaiji.bean.TbSurface;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TB_SURFACE".
*/
public class TbSurfaceDao extends AbstractDao<TbSurface, Long> {

    public static final String TABLENAME = "TB_SURFACE";

    /**
     * Properties of entity TbSurface.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", false, "ID");
        public final static Property Bm = new Property(1, Long.class, "bm", true, "_id");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Xqdz = new Property(3, String.class, "xqdz", false, "XQDZ");
        public final static Property Fl = new Property(4, String.class, "fl", false, "FL");
        public final static Property Wyxx = new Property(5, String.class, "wyxx", false, "WYXX");
        public final static Property Lxdh = new Property(6, String.class, "lxdh", false, "LXDH");
        public final static Property Polyarrays = new Property(7, String.class, "polyarrays", false, "POLYARRAYS");
        public final static Property Oprator = new Property(8, String.class, "oprator", false, "OPRATOR");
        public final static Property Opttime = new Property(9, java.util.Date.class, "opttime", false, "OPTTIME");
        public final static Property Deleteflag = new Property(10, String.class, "deleteflag", false, "DELETEFLAG");
        public final static Property Createtime = new Property(11, java.util.Date.class, "createtime", false, "CREATETIME");
        public final static Property Note = new Property(12, String.class, "note", false, "NOTE");
        public final static Property Lds = new Property(13, String.class, "lds", false, "LDS");
        public final static Property Img = new Property(14, String.class, "img", false, "IMG");
        public final static Property Flag = new Property(15, int.class, "flag", false, "FLAG");
    }


    public TbSurfaceDao(DaoConfig config) {
        super(config);
    }
    
    public TbSurfaceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TB_SURFACE\" (" + //
                "\"ID\" INTEGER," + // 0: id
                "\"_id\" INTEGER PRIMARY KEY ," + // 1: bm
                "\"NAME\" TEXT," + // 2: name
                "\"XQDZ\" TEXT," + // 3: xqdz
                "\"FL\" TEXT," + // 4: fl
                "\"WYXX\" TEXT," + // 5: wyxx
                "\"LXDH\" TEXT," + // 6: lxdh
                "\"POLYARRAYS\" TEXT," + // 7: polyarrays
                "\"OPRATOR\" TEXT," + // 8: oprator
                "\"OPTTIME\" INTEGER," + // 9: opttime
                "\"DELETEFLAG\" TEXT," + // 10: deleteflag
                "\"CREATETIME\" INTEGER," + // 11: createtime
                "\"NOTE\" TEXT," + // 12: note
                "\"LDS\" TEXT," + // 13: lds
                "\"IMG\" TEXT," + // 14: img
                "\"FLAG\" INTEGER NOT NULL );"); // 15: flag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TB_SURFACE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TbSurface entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long bm = entity.getBm();
        if (bm != null) {
            stmt.bindLong(2, bm);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String xqdz = entity.getXqdz();
        if (xqdz != null) {
            stmt.bindString(4, xqdz);
        }
 
        String fl = entity.getFl();
        if (fl != null) {
            stmt.bindString(5, fl);
        }
 
        String wyxx = entity.getWyxx();
        if (wyxx != null) {
            stmt.bindString(6, wyxx);
        }
 
        String lxdh = entity.getLxdh();
        if (lxdh != null) {
            stmt.bindString(7, lxdh);
        }
 
        String polyarrays = entity.getPolyarrays();
        if (polyarrays != null) {
            stmt.bindString(8, polyarrays);
        }
 
        String oprator = entity.getOprator();
        if (oprator != null) {
            stmt.bindString(9, oprator);
        }
 
        java.util.Date opttime = entity.getOpttime();
        if (opttime != null) {
            stmt.bindLong(10, opttime.getTime());
        }
 
        String deleteflag = entity.getDeleteflag();
        if (deleteflag != null) {
            stmt.bindString(11, deleteflag);
        }
 
        java.util.Date createtime = entity.getCreatetime();
        if (createtime != null) {
            stmt.bindLong(12, createtime.getTime());
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(13, note);
        }
 
        String lds = entity.getLds();
        if (lds != null) {
            stmt.bindString(14, lds);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(15, img);
        }
        stmt.bindLong(16, entity.getFlag());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TbSurface entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long bm = entity.getBm();
        if (bm != null) {
            stmt.bindLong(2, bm);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String xqdz = entity.getXqdz();
        if (xqdz != null) {
            stmt.bindString(4, xqdz);
        }
 
        String fl = entity.getFl();
        if (fl != null) {
            stmt.bindString(5, fl);
        }
 
        String wyxx = entity.getWyxx();
        if (wyxx != null) {
            stmt.bindString(6, wyxx);
        }
 
        String lxdh = entity.getLxdh();
        if (lxdh != null) {
            stmt.bindString(7, lxdh);
        }
 
        String polyarrays = entity.getPolyarrays();
        if (polyarrays != null) {
            stmt.bindString(8, polyarrays);
        }
 
        String oprator = entity.getOprator();
        if (oprator != null) {
            stmt.bindString(9, oprator);
        }
 
        java.util.Date opttime = entity.getOpttime();
        if (opttime != null) {
            stmt.bindLong(10, opttime.getTime());
        }
 
        String deleteflag = entity.getDeleteflag();
        if (deleteflag != null) {
            stmt.bindString(11, deleteflag);
        }
 
        java.util.Date createtime = entity.getCreatetime();
        if (createtime != null) {
            stmt.bindLong(12, createtime.getTime());
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(13, note);
        }
 
        String lds = entity.getLds();
        if (lds != null) {
            stmt.bindString(14, lds);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(15, img);
        }
        stmt.bindLong(16, entity.getFlag());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1);
    }    

    @Override
    public TbSurface readEntity(Cursor cursor, int offset) {
        TbSurface entity = new TbSurface( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // bm
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // xqdz
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fl
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // wyxx
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // lxdh
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // polyarrays
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // oprator
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // opttime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // deleteflag
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)), // createtime
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // note
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // lds
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // img
            cursor.getInt(offset + 15) // flag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TbSurface entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBm(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setXqdz(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setWyxx(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLxdh(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPolyarrays(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOprator(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setOpttime(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setDeleteflag(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCreatetime(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setNote(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setLds(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setImg(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setFlag(cursor.getInt(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TbSurface entity, long rowId) {
        entity.setBm(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TbSurface entity) {
        if(entity != null) {
            return entity.getBm();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TbSurface entity) {
        return entity.getBm() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
